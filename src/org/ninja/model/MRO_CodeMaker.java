/*** Licensed under the KARMA v.1 Law of Sharing. As others have shared freely to you, so shall you share freely back to us.* If you shall try to cheat and find a loophole in this license, then KARMA will exact your share,* and your worldly gain shall come to naught and those who share shall gain eventually above you.* In compliance with previous GPLv2.0 works of Jorg Janke, Low Heng Sin, Carlos Ruiz and contributors.* This Module Creator is an idea put together and coded by Redhuan D. Oon (red1@red1.org)*/package org.ninja.model;

import java.io.BufferedReader; import java.io.File;import java.io.FileOutputStream; import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.Writer;import java.net.MalformedURLException;import java.net.URL;import java.net.URLConnection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import java.util.Properties;import java.util.logging.Level;import org.adempiere.exceptions.AdempiereException;import org.adempiere.exceptions.DBException;import org.adempiere.model.MInfoProcess;import org.ninja.process.GenerateModule;import org.ninja.utils.AddTable;import org.ninja.utils.ModelClassGenerator;import org.ninja.utils.ModelInterfaceGenerator;import org.ninja.utils.NewEmptyTable;import org.compiere.model.MColumn;import org.compiere.model.MField;import org.compiere.model.MInfoColumn;import org.compiere.model.MInfoWindow;import org.compiere.model.MMenu;import org.compiere.model.MProcess;import org.compiere.model.MProcessPara;import org.compiere.model.MSequence;import org.compiere.model.MTab;import org.compiere.model.MTable;import org.compiere.model.MToolBarButton;import org.compiere.model.MTree_Base;import org.compiere.model.MTree_NodeMM;import org.compiere.model.MWindow;import org.compiere.model.Query;import org.compiere.model.X_AD_Menu;import org.compiere.model.X_AD_ReportView;import org.compiere.model.X_AD_TreeNodeMM;import org.compiere.util.CLogger;import org.compiere.util.DB;import org.compiere.util.DisplayType;import org.compiere.util.Env;import com.rmtheis.yandtran.ApiKeys;import com.rmtheis.yandtran.detect.Detect;import com.rmtheis.yandtran.language.Language;import com.rmtheis.yandtran.translate.Translate;public class MRO_CodeMaker extends X_RO_CodeMaker{
	/** Logger */	private static CLogger log = CLogger.getCLogger(MRO_CodeMaker.class);
	private static final long serialVersionUID = -1L;	private String packageName;	private int AD_Table_ID=0;	private String MClassName;	private String location_path;	private String TableName;	private MTable mtable;  	private MInfoWindow infowindow; 	private static final String NL = "\n";	private String[] processParams;	private Integer[][] processParamElements = null; 	private StringBuilder infoReportCols = new StringBuilder(); 	private StringBuilder infoReportColsAlias = new StringBuilder();	private String model_path = "org/my/model/";	private String process_path = "org/my/process/";	private String OSGI_path = "../OSGI-INF/";	private String component_path = "org/idempiere/component/";	private String processname = "";
	public MRO_CodeMaker(Properties ctx, int id, String trxName) {
		super(ctx,id,trxName);
		}

	public MRO_CodeMaker(Properties ctx, ResultSet rs, String trxName) {
		super(ctx, rs, trxName);
	}	public boolean handleCode() { 		if (getName()!=null){			TableName = getName().trim().replaceAll("\\s","");			if (TableName.contains("Info-Window")||TableName.contains("View")){				//check if InfoWindow				 infowindow = new Query(Env.getCtx(),MInfoWindow.Table_Name,MInfoWindow.COLUMNNAME_Name+"=?",get_TrxName())				.setParameters(getName()).first();				if (infowindow!=null){					if (isGenerateModel() || isGenerateModelFactory())						throw new AdempiereException("INFOWINDOW must not have IsGenerateModel/Factory");				} else 					throw new AdempiereException("Info-Window does not exist. Create it first in ModelMaker");	 		}else {				if (TableName != null && !TableName.isEmpty()){					MTable table = new Query(Env.getCtx(),MTable.Table_Name,MTable.COLUMNNAME_TableName+"=?",get_TrxName())					.setParameters(TableName)					.first();					if (table==null)						throw new AdempiereException("handleCode - tablename does not exist: "+TableName);					else {						mtable = table;						AD_Table_ID = table.get_ID();					}				}			}		}		 		modelDesign();		return true;	}		private void modelDesign() { 			log.info("New Model Design changed by: "+getName());						if (getGenerateProcess()!=null){ 				createProcess();			}			String packageName = "org.my.model";			MTable table = new MTable(Env.getCtx(),AD_Table_ID,get_TrxName());			String entityType = table.getEntityType();			String tableName = TableName;			String folder = getPluginLocation();						if (isGenerateModel()){				generateModel(packageName, entityType, tableName, folder);			}						if (isGenerateModelFactory()){				//GenerateModelFactory				generateModelFactory(packageName, folder);			} 					if (isGenerateTranslation())  			{				translateModel(); 			}	}	private void generateModelFactory(String packageName,String folder) {		generateFiles(getName(), folder, packageName);	}	private void generateModel(String packageName, String entityType,			String tableName, String folder) {		//GenerateModel		ModelInterfaceGenerator.generateSource(folder, packageName, entityType, tableName, get_TrxName());		ModelClassGenerator.generateSource(folder, packageName, entityType, tableName, get_TrxName());	}	private void createProcess(){		//check pre-existence		processname = getGenerateProcess();		if (processname==null || processname.startsWith("**") || processname.isEmpty())			return;		if (processname.equals("Report")||processname.equals("PrintFormat"))			processname = processname+infowindow.getAD_Table().getName();		location_path = getPluginLocation();		MProcess process = new Query(Env.getCtx(),MProcess.Table_Name,MProcess.COLUMNNAME_Value+"=?",null)		.setParameters(processname)		.first();		if (process==null){			process = new MProcess(Env.getCtx(),0,get_TrxName());			process.setValue(processname);			process.setEntityType("U");			process.setName(MRO_ModelMaker.leadingCapsSpacing(processname));  			process.setDescription(getDescription());			if (processname.startsWith("Report")) 				process.setClassname("org.my.process."+processname);			process.saveEx(get_TrxName());			MMenu menu = new MMenu(Env.getCtx(),0,get_TrxName());			menu.setName(MRO_ModelMaker.leadingCapsSpacing(processname));			menu.setAction(X_AD_Menu.ACTION_Process);			menu.setAD_Process_ID(process.get_ID());			menu.setEntityType("U");			menu.saveEx(get_TrxName());			attachMenuTree(menu);				} 		if (processname.startsWith("PrintFormat")){			process = createPrintFormat(process);			process.saveEx(get_TrxName());		}else		//If Process is Report create ReportView in it		if (processname.startsWith("Report")){			process = createInfoReport(process);			process.saveEx(get_TrxName());		}				//attach to window tab process icon if table is present		if (AD_Table_ID>0){			MWindow parentWindow = (MWindow) getAD_Table().getAD_Window();			MTab tab = new Query(Env.getCtx(),MTab.Table_Name,MTab.COLUMNNAME_AD_Table_ID+"=? AND "+MTab.COLUMNNAME_AD_Window_ID+"=?",get_TrxName())			.setParameters(AD_Table_ID,parentWindow.get_ID())			.first(); 			if (tab==null) 				throw new AdempiereException("Table's Window ID not found");			processToolBarAttach(processname, process, tab);		}else {			if (infowindow!=null){ //attach as InfoProcess				MInfoProcess infoprocess = new Query(Env.getCtx(),MInfoProcess.Table_Name,MInfoProcess.COLUMNNAME_AD_Process_ID+"=? AND "+MInfoProcess.COLUMNNAME_AD_InfoWindow_ID+"=?",get_TrxName())						.setParameters(process.get_ID(),infowindow.get_ID()).first();				if (infoprocess!=null)					return;								infoprocess = new MInfoProcess(Env.getCtx(),0,get_TrxName());				infoprocess.setAD_InfoWindow_ID(infowindow.get_ID());				infoprocess.setAD_Process_ID(process.get_ID());				infoprocess.setLayoutType(MInfoProcess.LAYOUTTYPE_Button);				infoprocess.setSeqNo(getSeqNo());				infoprocess.saveEx(get_TrxName());			}		}			if (processname.startsWith("PrintFormat")) //no need to do code nor classname at Process			return;				processParams = getParamsList(getProcessParameters());		processParamElements = new Integer[processParams.length][4];		for (int i=0;i<processParams.length;i++){			setProcessParamElement(processParams[i],i);		}		//create AD_Process = processName		//delete old first		List<MProcessPara> oldparas = new Query(Env.getCtx(),MProcessPara.Table_Name,MProcessPara.COLUMNNAME_AD_Process_ID+"=?",get_TrxName())		.setParameters(process.get_ID()).list();		for (MProcessPara para:oldparas){			para.delete(true);		}				for (int i=0;i<processParams.length;i++){					MProcessPara para = new MProcessPara(process);			para.setName(processParams[i]);			para.setAD_Element_ID(processParamElements[i][3]);			para.setAD_Reference_ID(processParamElements[i][0]);			para.setAD_Val_Rule_ID(processParamElements[i][1]);			para.setAD_Reference_Value_ID(processParamElements[i][2]);			para.setSeqNo(i+10);			para.saveEx(get_TrxName());		}		generateProcessJavaFile(processParams);		//set AD_Process in plugin.xml		writePLUGIN_advice();	}	private MProcess createPrintFormat(MProcess process) {		// TODO create new process standalone to show RV	 		MTable ntable = new MTable(getCtx(), 0, get_TrxName());		String reportname = infowindow.getName()+"_RV";		reportname = reportname.replaceAll("-", "");		reportname = reportname.replaceAll(" ","");		reportname = reportname.replaceAll("/","");		ntable.setTableName(reportname);		ntable.setName(reportname);		ntable.setIsView(true);		ntable.saveEx(get_TrxName());				int sno = 10;		X_AD_ReportView nview = new X_AD_ReportView(getCtx(), 0, get_TrxName());		nview.setName(ntable.getName());		nview.setAD_Table_ID(ntable.get_ID());		nview.saveEx(get_TrxName());		process.setIsReport(true);		process.setAD_ReportView_ID(nview.get_ID());		//Create Process Params from InfoWindow Criteria Columns		StringBuilder icolscript = new StringBuilder();		List<MInfoColumn> criteria = new Query(getCtx(), MInfoColumn.Table_Name, MInfoColumn.COLUMNNAME_AD_InfoWindow_ID+"=?",get_TrxName())				.setParameters(infowindow.get_ID())				.setOnlyActiveRecords(true)				.list();		for (MInfoColumn cri:criteria) {			//use all columns be they criteria or displayed			if (!cri.isQueryCriteria() && !cri.isDisplayed())				continue;			MColumn ncol = new MColumn(ntable);			ncol.setAD_Element_ID(cri.getAD_Element_ID());			ncol.setName(cri.getName());			ncol.setAD_Column_ID(cri.getAD_InfoColumn_ID());			ncol.setAD_Reference_ID(cri.getAD_Reference_ID());			ncol.setAD_Reference_Value_ID(cri.getAD_Reference_Value_ID());			ncol.setFieldLength(12);						log.info(cri.getName()+" "+cri.getAD_Reference().getName()+" Reference Value:"			+(cri.getAD_Reference_Value_ID()>0?cri.getAD_Reference_Value().getName():""));			ncol.saveEx(get_TrxName());			//parameters follow InfoWindow's			if (!cri.isQueryCriteria())				continue;			MProcessPara npara = new MProcessPara(process); 			npara.setColumnName(cri.getColumnName());			npara.setAD_Reference_ID(cri.getAD_Reference_ID());			npara.setAD_Reference_Value_ID(cri.getAD_Reference_Value_ID());			npara.setAD_Element_ID(cri.getAD_Element_ID());			npara.setName(cri.getName());			npara.setSeqNo(sno);			npara.saveEx(get_TrxName());			sno++;			if (cri.isQueryCriteria() && cri.isDisplayed())				continue;			icolscript.append(cri.getSelectClause()+",");		}		//create View / to include criteria too		String holder = infowindow.getSql().replace("SELECT","SELECT a.AD_Client_ID,a.AD_Org_ID,a.Created,a.CreatedBy,a.Updated,a.UpdatedBy,a.IsActive,"+icolscript.toString());		StringBuilder SQLView = new StringBuilder("CREATE OR REPLACE VIEW "+ntable.getName()+" AS ");		SQLView.append(holder);		if (infowindow.getWhereClause()!=null)				SQLView.append(" WHERE "+infowindow.getWhereClause());		DB.executeUpdateEx(SQLView.toString(), get_TrxName(), 3000);		return process;	}	/**	 * Create for InfoWindow a Report Process attached to ReportView based on T_Table which is based on InfoWindow exactly.	 * Java class also to be created to fetch the T_Selection of records and build its InfoWindow data.	 * @param process 	 * @return	 */	private MProcess createInfoReport(MProcess process) { 		if (infowindow==null)			throw new AdempiereException("InfoWindow null - cannot create ReportView");				//T_Table in AD and Synch to DB at end		MTable t_table = new Query(Env.getCtx(),MTable.Table_Name,MTable.COLUMNNAME_Name+"=?",get_TrxName())				.setParameters(process.getValue()+infowindow.get_TableName()).first();		if (t_table==null)			t_table = new MTable(Env.getCtx(),0,get_TrxName());		t_table.setName(process.getValue()+infowindow.get_TableName());		t_table.setTableName(process.getValue());		t_table.setDescription("T_Table created by Ninja for InfoWindow Report");		t_table.setEntityType("U");		t_table.saveEx(get_TrxName());		X_AD_ReportView rv = createInfoReportViewTable(t_table); 		//iterate columns in T_Table 		infoProcessReportColumns(t_table); 		postProcessColumns(t_table);		process.setIsReport(true); 		process.setAD_ReportView_ID(rv.get_ID());		return process;	}	private void postProcessColumns(MTable t_table) { 		MColumn[] columns = t_table.getColumns(true);		for (MColumn column:columns){			if (column.getColumnName().equals(infowindow.getAD_Table().getTableName()+"_ID"))				continue;			if (column.getColumnName().equals(processname+"_ID"))				continue;			if (infoReportCols.toString().contains(column.getColumnName()+",")) //check if column already included				continue;			infoReportCols.append(column.getColumnName());			infoReportColsAlias.append("a."+column.getColumnName()); 			infoReportCols.append(",");			infoReportColsAlias.append(",");		} //don't worry about trailing comma. Will be removed during Select Statement in generateProcessJavaFile	}	private void infoProcessReportColumns(MTable t_table) {		infoReportCols = new StringBuilder();		infoReportColsAlias = new StringBuilder();		NewEmptyTable nt = new NewEmptyTable(t_table);		AddTable at;		MColumn lastcolumn = null;		MInfoColumn[] infocolumns = infowindow.getInfoColumns(); 		for (MInfoColumn infocolumn:infocolumns){			//T_Table column			MColumn t_column = new Query(Env.getCtx(),MColumn.Table_Name,MColumn.COLUMNNAME_ColumnName+"=? AND "+MColumn.COLUMNNAME_AD_Table_ID+"=?",get_TrxName())					.setParameters(infocolumn.getColumnName(),t_table.get_ID()).first();			if (t_column!=null)				return;						t_column = new MColumn(t_table);			t_column.setAD_Element_ID(infocolumn.getAD_Element_ID());			t_column.setColumnName(infocolumn.getColumnName());			t_column = nt.CalloutProcessor(t_column);			t_column.saveEx(get_TrxName());			infoReportCols.append(t_column.getColumnName());			infoReportColsAlias.append(infocolumn.getSelectClause());			//don't worry about last comma. It is needed and will be removed in generateProcessJavaFile.			infoReportCols.append(",");			infoReportColsAlias.append(",");			lastcolumn=t_column;		}		//Synch to DB		try {			nt.createNewTable(); //to add 7 mandatory columns			at = new AddTable(t_table);			at.Synchronize(t_table, lastcolumn);		} catch (Exception e) { 			e.printStackTrace();		}	}	private X_AD_ReportView createInfoReportViewTable(MTable t_table) { 		X_AD_ReportView rv = new Query(Env.getCtx(),X_AD_ReportView.Table_Name,X_AD_ReportView.COLUMNNAME_Name+"=?", get_TrxName())				.setParameters(t_table.getName()).first();		if (rv!=null)			return rv;					rv = new X_AD_ReportView(Env.getCtx(), 0, get_TrxName());		rv.setName(t_table.getName());		rv.setDescription("RV Created by Ninja for InfoWindow Report");		rv.setAD_Table_ID(t_table.get_ID());		rv.setEntityType("U");		rv.saveEx(get_TrxName());		return rv;	}	private void processToolBarAttach(String name, MProcess process, MTab tab) {		MToolBarButton toolbarprocess = new Query(Env.getCtx(),MToolBarButton.Table_Name,MToolBarButton.COLUMNNAME_Name+"=?",get_TrxName())		.setParameters(name).first();		if (toolbarprocess!=null)			return;		 		toolbarprocess = new MToolBarButton(Env.getCtx(),0,get_TrxName());		toolbarprocess.setAD_Tab_ID(tab.get_ID());		toolbarprocess.setAD_Process_ID(process.get_ID());		toolbarprocess.setName(name);		toolbarprocess.setComponentName(name);		toolbarprocess.setSeqNo(getSeqNo());		toolbarprocess.saveEx(get_TrxName());	}		/** Create -- <MClassName> extends X_<tableName>	Example: MStastistics extends X_Statistics	 *  	   -- <tableName>ModelFactory.java   		Example: StatisticsModelFactory.java		 *  	   -- <tableName>ModelFactory.xml 			Example: StatisticsModelFactory.xml		 *         -- <tableName>DocEvent.java				Example: StatisticsDocEvent.java	 *         -- <tableName>DocEvent.xml 				Example: StatisticsDocEvent.xml	 * @param table	 * @param folder	 * @param packageName	 * @return	 */	private boolean generateFiles(String tableName, String folder, String packageName){		this.packageName = packageName; 		this.MClassName = "M"+tableName;		this.location_path = folder;		if (folder.endsWith("/") || folder.endsWith("\\"))		{		} else {			location_path = folder + File.separator;		}		generateMClassJavaFile();		generateModelFactoryJavaFile();		generateModelFactoryXMLFile();		generateDocEventJavaFile();		generateDocEventXMLFile();		writeMANIFEST_advice();		return true;		} 		/**	 * Generate Model Class for X class	 * 		Example:	 *	 	MStatistics extends X_MY_Statistics{	 *		MStatistics.java 	 *	If WorkflowStructure then inject DocActions code via ReadTemplate	 */	void generateMClassJavaFile() { 		StringBuilder sb = new StringBuilder();		if (getAD_Table().getColumn("DocAction")!=null){			sb = getMClassDocAction();		}else {			sb = new StringBuilder(COPYBEGIN); 			sb.append("package "+packageName+";").append(NL);			sb.append("import java.sql.ResultSet;");  			sb.append("import java.util.Properties;").append(NL);			sb.append("public class "+MClassName+" extends X_"+TableName +"{").append(NL);			sb.append("").append(NL);  			sb.append("\tprivate static final long serialVersionUID = -1L;").append(NL);			sb.append("\tpublic "+MClassName+"(Properties ctx, int id, String trxName) {").append(NL);			sb.append("		super(ctx,id,trxName);");			sb.append("		}").append(NL);			sb.append("\tpublic "+MClassName+"(Properties ctx, ResultSet rs, String trxName) {").append(NL);			sb.append("		super(ctx, rs, trxName);");			sb.append("	}"); 			sb.append("}");  			if (GenerateModule.IsAllNodes) {				log.info("TEST OF generateMClassJavaFile - "+location_path+model_path+MClassName+".java");				return;			}			}					writeToFile(sb, location_path+model_path+MClassName+".java");	} 	private StringBuilder getMClassDocAction() {		URL url;		StringBuilder bd = new StringBuilder();		try {			// get URL content -- if Kanban then kanbanDocAction TODO			url = new URL("http://www.red1.org/SampleDocAction.txt");			URLConnection conn = url.openConnection();			// open the stream and put it into BufferedReader			BufferedReader br = new BufferedReader(                               new InputStreamReader(conn.getInputStream()));			String inputLine;			while ((inputLine = br.readLine()) != null) {				//MRO_ModelHeader				inputLine = inputLine.replaceAll("MRO_ModelHeader","X_"+getAD_Table().getTableName());				inputLine = inputLine.replaceAll("COLUMNNAME_RO_ModelHeader","COLUMNNAME_"+getAD_Table().getTableName());				inputLine = inputLine.replaceAll("RO_ModelHeader",getAD_Table().getTableName());				//parse custom details				inputLine = inputLine.replaceAll("SampleDocAction",MClassName);				bd.append(inputLine+NL);			}			log.info("Online SampleDocAction Successful");		} catch (MalformedURLException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}		return bd;	}	void generateModelFactoryJavaFile() {		StringBuilder sb = new StringBuilder(COPYBEGIN);  		sb.append("package org.idempiere.component;");		sb.append("import "+packageName+"."+MClassName+";");			sb.append("import java.sql.ResultSet;"); 		sb.append("import org.adempiere.base.IModelFactory;");		sb.append("import org.compiere.model.PO;");		sb.append("import org.compiere.util.Env;").append(NL);		sb.append("public class "+TableName+"ModelFactory implements IModelFactory {").append(NL);  		sb.append("	@Override ");		sb.append("	public Class<?> getClass(String tableName) {").append(NL);		sb.append("		 if (tableName.equals("+MClassName+".Table_Name)){").append(NL);		sb.append("			 return "+MClassName+".class;");		sb.append("		 }  ");		sb.append("		return null;");		sb.append("	}"); 		sb.append("	@Override");		sb.append("	public PO getPO(String tableName, int Record_ID, String trxName) {").append(NL);		sb.append("		 if (tableName.equals("+MClassName+".Table_Name)) {").append(NL);		sb.append("		     return new "+MClassName+"(Env.getCtx(), Record_ID, trxName);");		sb.append("		 }  ");		sb.append("		return null;");		sb.append("	}"); 		sb.append("	@Override");		sb.append("	public PO getPO(String tableName, ResultSet rs, String trxName) {").append(NL);		sb.append("		 if (tableName.equals("+MClassName+".Table_Name)) {").append(NL);		sb.append("		     return new "+MClassName+"(Env.getCtx(), rs, trxName);");	 		sb.append("		   } ");		sb.append("		 return null;");		sb.append("	}");		sb.append("}"); 		if (GenerateModule.IsAllNodes) {			log.info("TEST OF generateModelFactoryJavaFile - "+location_path+component_path+TableName+"ModelFactory.java");			return;		}		writeToFile(sb, location_path+component_path+TableName+"ModelFactory.java"); 	}	/**	 * iterate params inside java file during creation	 * @param model	 * @param params 	 */	private void generateProcessJavaFile(String[] params) { 		Class<?> clazz = null; 		String fullqualified = ""; 		String  modelname = ""; 		String tablename = ""; 		StringBuilder sb = new StringBuilder(COPYBEGIN);  		sb.append("package org.my.process;\r");		sb.append("import org.compiere.process.ProcessInfoParameter;\r"); 		if (AD_Table_ID==0 && getName()!=null && !getName().isEmpty()){ //this is infoWindow handling 			MInfoWindow infowindow = new Query(Env.getCtx(),MInfoWindow.Table_Name,MInfoWindow.COLUMNNAME_Name+"=?",get_TrxName())					.setParameters(getName())					.first();			if (infowindow==null)				throw new AdempiereException("Info-Window Does Not Exist");			tablename = infowindow.getAD_Table().getTableName();			clazz = MTable.getClass(tablename);			if (clazz==null)				throw new AdempiereException("STOP and install new plugin. Run CodeMaker again");			fullqualified =  clazz.getCanonicalName();			modelname = fullqualified.substring(fullqualified.lastIndexOf(".")+1);			sb.append("import java.util.List;");			sb.append("import org.compiere.model.Query;");			sb.append("import org.compiere.util.Env;");			sb.append("import java.sql.SQLException;");			sb.append("import java.sql.PreparedStatement;");			sb.append("import org.compiere.util.DB;"); 			sb.append("import org.adempiere.exceptions.AdempiereException;"); 			sb.append("import org.compiere.model.MSequence;");			sb.append("import "+fullqualified+";");		 		}		sb.append("import org.compiere.process.SvrProcess;\r").append(NL);		sb.append("\tpublic class "+processname+" extends SvrProcess {").append(NL);   		//		for (int i=0;i<processParams.length;i++){			int ref = processParamElements[i][0];			String line = "private int "+params[i]+" = 0;";			if (ref==13) { //table direct								}else if (ref==16) {					line = "private Timestamp "+params[i]+" = null;";				}else if (ref==20){					line = "private boolean "+params[i]+" = false;";				}else if (ref==10 || ref==17 || ref==14)					line = "private String "+params[i]+" = \"\";";			sb.append("\r\t"+line);		}		sb.append("\r\tprotected void prepare() {").append(NL);		sb.append("\t\tProcessInfoParameter[] para = getParameter();");		sb.append("\t\t\tfor (ProcessInfoParameter p:para) {").append(NL);		sb.append("\t\t\t\tString name = p.getParameterName();");		sb.append("\t\t\t\tif (p.getParameter() == null)\r\t\t\t\t\t;");		for (int i=0;i<processParams.length;i++){			int ref = processParamElements[i][0];			String line = params[i]+" = p.getParameterAsInt();";			sb.append("\t\t\t\telse if(name.equals(\""+params[i]+"\")){").append(NL);			if (ref==13) { //table direct								}else if (ref==16) {					line = params[i]+" = (Timestamp)p.getParameter();";				}else if (ref==20){					line = params[i]+" = \"Y\".equals(p.getParameter());";				}else if (ref==10 || ref==17 || ref==14)					line = params[i]+" = (String)p.getParameter();";			sb.append("\t\t\t\t\t"+line+"\t\t\t}");		} 		sb.append("\t\t}\t}");				sb.append("\r\tprotected String doIt() {").append(NL); 		if (AD_Table_ID>0 || getName()==null || getName().isEmpty())			sb.append("\t\treturn \"\";");		else {			if (processname.startsWith("Report")){		 				sb.append("\t\tMSequence seq = MSequence.get(getCtx(), \""+processname+"\");");				sb.append("\t\tif (seq == null)\n");				sb.append("\t\t\tthrow new AdempiereException(\"No sequence for "+processname+" table\"); ");				sb.append("\t\tif (IsActive) { \n");				sb.append("\t\t\tString delete = \"DELETE FROM "+processname+"\"; ");				sb.append("\t\t\tDB.executeUpdate(delete, get_TrxName()); ");				sb.append("\t\t}\n "); 			}			//InfoWindow Process fetches T_Selection			sb.append("\t\tString whereClause = \"EXISTS (SELECT T_Selection_ID FROM T_Selection WHERE T_Selection.AD_PInstance_ID=? AND T_Selection.T_Selection_ID="+tablename+"."+tablename+"_ID)\";").append(NL);			sb.append("\t\tList<"+modelname+"> lines = new Query(Env.getCtx(),"+modelname+".Table_Name,whereClause,get_TrxName())").append(NL);			sb.append("\t\t.setParameters(getAD_PInstance_ID()).list();").append(NL); 			sb.append("\t\tfor ("+modelname+" line:lines){").append(NL);			sb.append("\t\t\tint a = line.get_ID();").append(NL);			sb.append("\t\t\tlog.info(\"Selected line ID = \"+a);").append(NL);			if (processname.startsWith("Report")){				String[] infoSQL = infowindow.getSql().split("\\n");				StringBuilder infoSQLfull = new StringBuilder();				for (int i=1;i<infoSQL.length;i++){					infoSQLfull.append(infoSQL[i]+"\"\n\t\t");					if (i<infoSQL.length)						infoSQLfull.append("+\" ");				} 				String selectstmt = infoSQLfull.toString().replaceFirst("INNER ", "SELECT "+infoReportColsAlias.toString()+" nextIDFunc(?, 'N') FROM "+infowindow.getAD_Table().getTableName()+" a \" \n+\"INNER ");				sb.append("\t\tString insert=\"INSERT INTO "+processname+" ("+infoReportCols.toString()+" "+processname+"_ID) "+selectstmt+" WHERE "+infowindow.getAD_Table().getTableName()+"_ID =\"+line.get_ID();"+NL);				sb.append("\t\tPreparedStatement pstmt = null;");				sb.append("\t\ttry").append(NL);				sb.append("\t\t{").append(NL);				sb.append("\t\t\tpstmt = DB.prepareStatement(insert, get_TrxName());"); 				sb.append("\t\t\tpstmt.setInt(1, seq.getAD_Sequence_ID());");				sb.append("\t\t\tpstmt.executeUpdate();");				sb.append("\t\t}\t\tcatch (SQLException e)");				sb.append("\t\t{").append(NL);				sb.append("\t\t\tthrow new AdempiereException(e);");				sb.append("\t\t}") ;				sb.append("\t\tfinally {\n") ;				sb.append("\t\t\tDB.close(pstmt);") ;				sb.append("\t\t\tpstmt = null;") ;				sb.append("\t\t}");			}			sb.append("\t}").append(NL);			sb.append("\treturn \"RESULT: \"+lines.toString();").append(NL);						/**InfoWindow Report Process insert InfoWindow data @ FOR LOOP			 * SELECT infoSelectCols FROM MField info.getSQL() AND MField_ID = "+line.getID(); 			 * 			 */		}		sb.append("\t}");		sb.append("}");		if (GenerateModule.IsAllNodes) {			log.info("TEST OF createProcessJavaFile - "+location_path+process_path+processname+".java");			return;		}		writeToFile(sb, location_path+process_path+processname+".java"); 	}		/** Fetch most common Column values	 *  //AD_Reference_ID		//AD_Val_Rule_ID		//AD_Reference_Value_ID	 * @param param	 * @param i	 * @return	 */	private StringBuilder setProcessParamElement(String param, int i) { 		//take most common column reference to set at 		String sql = ""				+ "SELECT AD_Reference_ID, "				+ "       AD_Val_Rule_ID, "				+ "       AD_Reference_Value_ID, AD_Element_ID, "				+ "       COUNT(*) "				+ "FROM   AD_Column "				+ "WHERE  ColumnName = ? "				+ "GROUP  BY AD_Reference_ID, "				+ "          AD_Val_Rule_ID, "				+ "          AD_Reference_Value_ID, AD_Element_ID "				+ "ORDER  BY COUNT(*) DESC ";		PreparedStatement pstmt = null;		ResultSet rs = null;		try		{			pstmt = DB.prepareStatement(sql, null);			pstmt.setString(1, param);			rs = pstmt.executeQuery();			if (rs.next()) {				int ad_reference_id = rs.getInt(1);				if (ad_reference_id == DisplayType.ID)					ad_reference_id = DisplayType.TableDir;				processParamElements[i][0]=ad_reference_id;	//AD_Reference_ID				processParamElements[i][1]=rs.getInt(2);	//AD_Val_Rule_ID				processParamElements[i][2]=rs.getInt(3);	//AD_Reference_Value_ID				processParamElements[i][3]=rs.getInt(4);	//AD_Element_ID			}			else throw new AdempiereException("Process Parameter Does Not Exist - "+param);		}		catch (SQLException e)		{			throw new DBException(e);		}		finally		{			DB.close(rs, pstmt);			rs = null;			pstmt = null;		}		return null;	}	private String[] getParamsList(String paramSet) {		if (paramSet==null || paramSet.isEmpty()){			paramSet="IsActive";			log.warning("Params are blank. Forcing IsActive as default");		}		String[] ps = paramSet.split(",");		if (ps.length==0)			return null;		List<String> params = new ArrayList<String>();		if (ps.length==1 && paramSet.split("#").length>2)			ps = paramSet.split(" "); //a single long string with more #elements? Means forgot to put in commas and used spaces instead.		for (String paramName:ps){			String[] split = paramName.split("#");			if (split.length==2){				split[0] = split[0].trim();				paramName = split[1];			}			paramName = paramName.trim();			paramName = paramName.replace(" ", "");			//addParam(split[0],colname,get_TrxName());			params.add(paramName);		} 		String[] returnParams = new String[params.size()];		returnParams = params.toArray(returnParams);		return returnParams;	}	private void generateModelFactoryXMLFile() {  		StringBuilder sb = new StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");  		sb.append("<scr:component xmlns:scr=\"http://www.osgi.org/xmlns/scr/v1.1.0\" name=\"org.plugin."+TableName+"model\">"); 		sb.append("<implementation class=\"org.idempiere.component."+TableName+"ModelFactory\"/>");		sb.append("<property name=\"service.ranking\" type=\"Integer\" value=\"1\"/>");		sb.append("<service>");		sb.append("<provide interface=\"org.adempiere.base.IModelFactory\"/>");		sb.append("</service>");		sb.append("</scr:component>"); 		if (GenerateModule.IsAllNodes) {			log.info("TEST OF generateModelFactoryXMLFile - "+location_path + OSGI_path+TableName+"ModelFactory.xml");			return;		}		writeToFile(sb, location_path + OSGI_path+TableName+"ModelFactory.xml");	}	private void generateDocEventJavaFile() {		StringBuilder sb = new StringBuilder(COPYBEGIN);  		sb.append("package org.idempiere.component;");		sb.append("import "+packageName+"."+MClassName+";");				sb.append("import org.adempiere.base.event.AbstractEventHandler;");		sb.append("import org.adempiere.base.event.IEventTopics;"); 		sb.append("import org.compiere.model.PO;"); 		sb.append("import org.compiere.util.CLogger;"); 		sb.append("import org.osgi.service.event.Event;").append(NL);		sb.append("public class "+TableName+"DocEvent extends AbstractEventHandler {").append(NL);		sb.append(" 	private static CLogger log = CLogger.getCLogger("+TableName+"DocEvent.class);");		sb.append("		private String trxName = \"\";");		sb.append("		private PO po = null;").append(NL);		sb.append("\t@Override \n\tprotected void initialize() { ").append(NL);		sb.append("		registerTableEvent(IEventTopics.PO_AFTER_CHANGE, "+MClassName+".Table_Name);"); 		sb.append("		log.info(\""+TableName+"<PLUGIN> .. IS NOW INITIALIZED\");");		sb.append("		}").append(NL);		sb.append("\t@Override \n\tprotected void doHandleEvent(Event event){").append(NL);		sb.append("		String type = event.getTopic();");		sb.append("		if (type.equals(IEventTopics.AFTER_LOGIN)) {").append(NL+"\t}");		sb.append(" \t\telse {").append(NL);		sb.append("			setPo(getPO(event));");		sb.append("			setTrxName(po.get_TrxName());");		sb.append("	log.info(\" topic=\"+event.getTopic()+\" po=\"+po);");		sb.append("		if (po instanceof "+MClassName+"){").append(NL);		sb.append("			if (IEventTopics.PO_AFTER_CHANGE == type){").append(NL);		sb.append("				"+MClassName+" modelpo = ("+MClassName+")po;");		sb.append("	log.fine(\""+MClassName+" changed: \"+modelpo.get_ID());");		sb.append("	// **DO SOMETHING** ;");		sb.append("			}");		sb.append("		}");		sb.append("	  }");		sb.append(" }").append(NL);		sb.append("	private void setPo(PO eventPO) {").append(NL);		sb.append("		 po = eventPO;");		sb.append("	}").append(NL);		sb.append("	private void setTrxName(String get_TrxName) {").append(NL);		sb.append(" 	trxName = get_TrxName;	");		sb.append("	}");		sb.append("}");		if (GenerateModule.IsAllNodes) {			log.info("TEST OF generateDocEventJavaFile - "+location_path+component_path+TableName+"DocEvent.java");			return;		}		writeToFile(sb, location_path+component_path+TableName+"DocEvent.java");	}			private void generateDocEventXMLFile() {		StringBuilder sb = new StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");  		sb.append("<scr:component xmlns:scr=\"http://www.osgi.org/xmlns/scr/v1.1.0\" name=\"org.plugin."+TableName+"DocEvent\">"); 		sb.append("<implementation class=\"org.idempiere.component."+TableName+"DocEvent\"/>");		sb.append(" <reference bind=\"bindEventManager\" cardinality=\"1..1\" interface=\"org.adempiere.base.event.IEventManager\" name=\"IEventManager\" policy=\"static\" unbind=\"unbindEventManager\"/>");		sb.append("</scr:component>");		if (GenerateModule.IsAllNodes) {			log.info("TEST OF generateDocEventXMLFile - "+location_path+OSGI_path+TableName+"DocEvent.xml");			return;		}		writeToFile(sb, location_path+OSGI_path+TableName+"DocEvent.xml"); 	}	private void writeMANIFEST_advice() {		StringBuilder sb = new StringBuilder("Service-Component: OSGI-INF/"+TableName+"DocEvent.xml,OSGI-INF/"+TableName+"ModelFactory.xml");  		if (GenerateModule.IsAllNodes) {			log.info("TEST OF writeMANIFEST_advice - "+location_path+"../META-INF/MANIFEST.txt");			return;		}		writeToFile(sb, location_path+"../META-INF/MANIFEST.txt"); 	}	private void writePLUGIN_advice() {		StringBuilder sb = new StringBuilder("<extension id=\"org.my.process."+processname+"\"").append(NL);  		sb.append("  point=\"org.adempiere.base.Process\">").append(NL); 		sb.append("\t<process").append(NL); 		sb.append("\t\tclass=\"org.my.process."+processname+"\">").append(NL); 		sb.append("\t</process>").append(NL); 		sb.append("</extension>").append(NL);		if (GenerateModule.IsAllNodes) {			log.info("TEST OF writePLUGIN_advice - "+location_path+"../PLUGIN.txt");			return;		} 		writeToFile(sb, location_path+"../PLUGIN.txt"); 	}	private String COPYBEGIN =			 "/**\r" 			+ "* Licensed under the KARMA v.1 Law of Sharing. As others have shared freely to you, so shall you share freely back to us.\r"			+ "* If you shall try to cheat and find a loophole in this license, then KARMA will exact your share,\r"			+ "* and your worldly gain shall come to naught and those who share shall gain eventually above you.\r"			+ "* In compliance with previous GPLv2.0 works of Jorg Janke, Low Heng Sin, Carlos Ruiz and contributors.\r"			+ "* This Module Creator is an idea put together and coded by Redhuan D. Oon (red1@red1.org)\r"			+ "*/\r\r";	/*	 * Write to file	 *	 * @param sb string buffer	 * @param fileName file name	 */	public static void writeToFile(StringBuilder sb, String fileName) {		try {			File out = new File(fileName);			Writer fw = new OutputStreamWriter(new FileOutputStream(out, false), "UTF-8");			for (int i = 0; i < sb.length(); i++) {				char c = sb.charAt(i);				// after				if (c == ';' || c == '}') {					fw.write(c);					if (sb.substring(i + 1).startsWith("//"))						fw.write('\t');					else						fw.write(NL);				}				// before & after				else if (c == '{') {					//fw.write(NL);					fw.write(c);					//fw.write(NL);				} else					fw.write(c);			}			fw.flush();			fw.close();			float size = out.length();			size /= 1024;			StringBuilder msgout = new StringBuilder().append(out.getAbsolutePath()).append(" - ").append(size).append(" kB");			System.out.println(msgout.toString());		} catch (Exception ex) {			log.log(Level.SEVERE, fileName, ex);			throw new RuntimeException(ex);		}	}	/**	 * Online translation done via Yandex, with registration key provided by RED1	 * 		Translate this User defined table's window, its menu and tabs and fields			Do not translate if it is different from base (means translated before)			    int win_ID = model.getAD_Table().getAD_Window_ID();  				SELECT * FROM AD_Window_Trl where AD_Window_ID = windID				UPDATE AD_Window_Trl set Name = 'Test' where AD_Window_ID = 1000002				SELECT * FROM AD_Tab where AD_Window_ID = 1000002				SELECT * FROM AD_Tab_Trl where AD_Tab_ID = 1000002				SELECT * FROM AD_Field where AD_Tab_ID = 1000002				SELECT * FROM AD_Field_Trl where AD_Field_ID = 1000029 	 * @param model	 */	private void translateModel() {		int win_ID =getAD_Table().getAD_Window_ID();  		MWindow window = new Query(Env.getCtx(),MWindow.Table_Name,MWindow.COLUMNNAME_AD_Window_ID+"=?",get_TrxName())		.setParameters(win_ID)		.first();		String name = window.getName();				try {			Translate.setKey(ApiKeys.YANDEX_API_KEY);						//Identify its base language, usually English.		    Language base_lang = Detect.execute(name);		    org.compiere.util.Language login = Env.getLoginLanguage(Env.getCtx());		    String loginLanguage = login.getAD_Language();		    String code[] = loginLanguage.split("_");		    String locale_code = code[0];		    StringBuilder setSQL = null;		    		    //Translate Window Name		    //check if translated before		    setSQL = new StringBuilder("SELECT Name FROM AD_Window_Trl where AD_Window_ID ="+win_ID+" AND AD_Language ='"+loginLanguage+"'");			String notYetTranslate = getStringFromDB(setSQL);			if (notYetTranslate.equals(name)){  				String translated = Translate.execute(name,base_lang,Language.fromString(locale_code));				if (translated!=null) {					setSQL = new StringBuilder("UPDATE AD_Window_Trl set Name = '"+translated+"' WHERE AD_Window_ID = "+win_ID+" AND AD_Language ='"+loginLanguage+"'");					int no = DB.executeUpdate(setSQL.toString(), get_TrxName());					log.fine("#" + no);					log.finest(setSQL.toString());				}			}			 			//Get Window's Menu item			MMenu menu = new Query(Env.getCtx(),MMenu.Table_Name,MMenu.COLUMNNAME_AD_Window_ID+"=?",get_TrxName())			.setParameters(win_ID)			.first(); 			//Translate Menu name			name = menu.getName();			//check if translated before			setSQL = new StringBuilder("SELECT name FROM AD_Menu_Trl WHERE AD_Menu_ID="+menu.get_ID()+" AND AD_Language ='"+loginLanguage+"'");			notYetTranslate = getStringFromDB(setSQL);			if (notYetTranslate.equals(name)){				String translated = Translate.execute(name,base_lang,Language.fromString(locale_code));				if (translated!=null) {					setSQL = new StringBuilder("UPDATE AD_Menu_Trl set Name = '"+translated+"' WHERE AD_Menu_ID = "+menu.get_ID()+" AND AD_Language ='"+loginLanguage+"'");					int no = DB.executeUpdate(setSQL.toString(), get_TrxName());					log.fine("#" + no);					log.finest(setSQL.toString());				}			}  				//Get Window's Tab(s)			List<MTab> tabs = new Query(Env.getCtx(),MTab.Table_Name,MTab.COLUMNNAME_AD_Window_ID+"=?",get_TrxName())			.setParameters(win_ID)			.list();			//Translate each Tab in Window			for (MTab tab:tabs){				name = tab.getName();				//check if translated before				setSQL = new StringBuilder("SELECT name FROM AD_Tab_Trl WHERE AD_Tab_ID="+tab.get_ID()+" AND AD_Language ='"+loginLanguage+"'");				notYetTranslate = getStringFromDB(setSQL);				if (notYetTranslate.equals(name)){					String translated = Translate.execute(name,base_lang,Language.fromString(locale_code));					if (translated!=null){						setSQL = new StringBuilder("UPDATE AD_Tab_Trl set Name = '"+translated+"' WHERE AD_Tab_ID = "+tab.get_ID()+" AND AD_Language ='"+loginLanguage+"'");						int no = DB.executeUpdate(setSQL.toString(), get_TrxName());						log.fine("#" + no);						log.finest(setSQL.toString());					}				}							//Get Tab's Field(s)				List<MField> fields = new Query(Env.getCtx(),MField.Table_Name,MField.COLUMNNAME_AD_Tab_ID+"=? AND "+MField.COLUMNNAME_IsDisplayed+"=?",get_TrxName())				.setParameters(tab.get_ID(),"Y")				.list();				//Translate each Field in Tab				for (MField field:fields){ 					name = field.getName();					String toTranslate = name;					name = name.replaceAll("\\s+", "").trim();					//check if its a window field custom name					String column = field.getAD_Column().getName().replaceAll("\\s+", "").trim();					if (!column.equals(name))						name=column;					//check if translated before					setSQL = new StringBuilder("SELECT name FROM AD_Field_Trl WHERE AD_Field_ID="+field.get_ID()+" AND AD_Language ='"+loginLanguage+"'");					notYetTranslate = getStringFromDB(setSQL);					notYetTranslate = notYetTranslate.replaceAll("\\s+", "").trim();					if (notYetTranslate.equals(name)){						String translated = Translate.execute(toTranslate,base_lang,Language.fromString(locale_code));						if (translated!=null){							setSQL = new StringBuilder("UPDATE AD_Field_Trl set Name = '"+translated+"' WHERE AD_Field_ID = "+field.get_ID()+" AND AD_Language ='"+loginLanguage+"'");							int no = DB.executeUpdate(setSQL.toString(), get_TrxName());							log.fine("#" + no);							log.finest(setSQL.toString());						}					} 				}			} 		} catch (Exception e) { 			e.printStackTrace();		}	}	private MTable getAD_Table() { 		if (mtable==null){			 mtable = new MTable(Env.getCtx(),AD_Table_ID,get_TrxName());		}		return mtable;	}	private String getStringFromDB(final StringBuilder SQL){		final PreparedStatement pstmt = DB.prepareStatement(SQL.toString(),get_TrxName());		ResultSet rs = null;		try { 			rs = pstmt.executeQuery(); 			if (rs.next()) {				return rs.getString(1);  			}		} catch (SQLException e) {			log.severe(e.getMessage());			throw new AdempiereException(e);		} finally {			DB.close(rs, pstmt);		}		return "";	}	private void attachMenuTree(MMenu menu) {		MRO_ModelHeader header = new Query(Env.getCtx(),MRO_ModelHeader.Table_Name,MRO_ModelHeader.COLUMNNAME_RO_ModelHeader_ID+"=?",get_TrxName())				.setParameters(this.getRO_ModelHeader_ID()).first();		MMenu parent = header.createMenuSummaryLevel();		MTree_Base menutree =  new MTree_Base(Env.getCtx(),10,get_TrxName());		X_AD_TreeNodeMM mm = new Query(Env.getCtx(),MTree_NodeMM.Table_Name,MTree_NodeMM.COLUMNNAME_AD_Tree_ID+"=? AND "+MTree_NodeMM.COLUMNNAME_Node_ID+"=?",get_TrxName())		.setParameters(menutree.get_ID(),menu.get_ID())		.first();		if (mm != null){			mm.setParent_ID(parent.get_ID());			mm.saveEx(get_TrxName());		}	}
}
