/*** Licensed under the KARMA v.1 Law of Sharing. As others have shared freely to you, so shall you share freely back to us.* If you shall try to cheat and find a loophole in this license, then KARMA will exact your share,* and your worldly gain shall come to naught and those who share shall gain eventually above you.* In compliance with previous GPLv2.0 works of Jorg Janke, Low Heng Sin, Carlos Ruiz and contributors.* This Module Creator is an idea put together and coded by Redhuan D. Oon (red1@red1.org)*/package org.ninja.process;
import java.util.List;import org.compiere.model.MMenu;import org.compiere.model.MTree_Base;import org.compiere.model.MTree_NodeMM;import org.compiere.model.PO;import org.compiere.model.Query;import org.compiere.model.X_AD_TreeNodeMM;import org.compiere.process.ProcessInfoParameter;import org.compiere.process.SvrProcess;import org.compiere.util.Env;import org.compiere.util.Msg;import org.compiere.util.Trx;import org.ninja.model.MRO_CodeMaker;import org.ninja.model.MRO_ModelHeader;import org.ninja.model.MRO_ModelMaker;import org.ninja.utils.HandleCSVImport;	public class GenerateModule extends SvrProcess {
			/** Record ID */	protected int p_Record_ID = 0;		public static boolean IsAllNodes = false;
	int models = 0;	int codes = 0;	public static int columnlistlength = 0;	protected void prepare() {		p_Record_ID = getRecord_ID();		columnlistlength = 0;
		ProcessInfoParameter[] para = getParameter();
			for (ProcessInfoParameter p:para) {
				String name = p.getParameterName();
				if (p.getParameter() == null)					;
				else if(name.equals("IsAllNodes")){
					IsAllNodes = "Y".equals(p.getParameter());
			}
		}
	}
	protected String doIt() {		MTree_Base menutree =  new MTree_Base(Env.getCtx(),10,get_TrxName());		int cnt = 1;		if (IsAllNodes){ //DO ALL			int[] hdrs = PO.getAllIDs(MRO_ModelHeader.Table_Name, "isActive='Y'", get_TrxName());;			if (hdrs.length==0) return "NO HEADERS";			for (int rec_id:hdrs){				executeEach(menutree, rec_id);				cnt++;			}			Trx trx = Trx.get(get_TrxName(), false);			if (trx.rollback())				return "TEST SUCCESSFUL - HEADERS:"+cnt+" MODELS:"+models+"(COLUMNS:"+columnlistlength+") CODES:"+codes;;		}		else { //DO INSTANT RECORD			executeEach(menutree, p_Record_ID);		}		
		return "COMPLETED - HEADERS:"+cnt+" MODELS:"+models+"(COLUMNS:"+columnlistlength+") CODES:"+codes;
	}	private void executeEach(MTree_Base menutree, int hdr_rec) {		MRO_ModelHeader header = new Query(Env.getCtx(),MRO_ModelHeader.Table_Name,MRO_ModelHeader.COLUMNNAME_RO_ModelHeader_ID+"=?",get_TrxName())		.setParameters(hdr_rec)		.setOnlyActiveRecords(true)		.first();		MMenu parent = header.createMenuSummaryLevel();		//iterate all tabs and contents				//iterate all models within this header		List<MRO_ModelMaker> tabmodel = new Query(Env.getCtx(),MRO_ModelMaker.Table_Name,MRO_ModelMaker.COLUMNNAME_RO_ModelHeader_ID+"=?",get_TrxName())		.setParameters(header.getRO_ModelHeader_ID())		.setOnlyActiveRecords(true)		.setClient_ID()		.setOrderBy(MRO_ModelMaker.COLUMNNAME_SeqNo)		.list();				for (MRO_ModelMaker model:tabmodel){ 			statusUpdate("Processing Model : " + model.getName());			HandleCSVImport attachcsv = new HandleCSVImport(model);			try {				String result = attachcsv.getCSVandProcess();				log.fine(result);				if (result.startsWith("CSV"))					continue;			} catch (Exception e) { 						e.printStackTrace();				continue;			} 			//check if InfoWindow or Window AND Workflow to create			MMenu menu = model.handleModel(); 			if (menu==null){			} else {								//get menu and attach to Main tree 				attachMenuTree(menutree, parent, menu);						}			models++;			model.setDescription("** MODEL PROCESSED ** ACTIVATE BACK TO GENERATE AGAIN OR DELETE");			model.setIsActive(false);			model.saveEx(get_TrxName());			//commit first before proceeding to Code tab			Trx trx = Trx.get(get_TrxName(), false);			trx.commit();		}				//iterate Model Code recs within this header		List<MRO_CodeMaker> tabcode = new Query(Env.getCtx(),MRO_CodeMaker.Table_Name,MRO_CodeMaker.COLUMNNAME_RO_ModelHeader_ID+"=?",get_TrxName())		.setParameters(header.getRO_ModelHeader_ID())		.setOnlyActiveRecords(true)		.setClient_ID()		.setOrderBy(MRO_CodeMaker.COLUMNNAME_SeqNo)		.list();				for (MRO_CodeMaker code:tabcode){			statusUpdate("Processing Code : " + code.getName());			//check if InfoWindow or Window			if (code.handleCode()){				codes++;				code.setIsActive(false);				code.saveEx(get_TrxName());			}		}				}	private void attachMenuTree(MTree_Base menutree, MMenu parent, MMenu menu) {		X_AD_TreeNodeMM mm = new Query(Env.getCtx(),MTree_NodeMM.Table_Name,MTree_NodeMM.COLUMNNAME_AD_Tree_ID+"=? AND "+MTree_NodeMM.COLUMNNAME_Node_ID+"=?",get_TrxName())		.setParameters(menutree.get_ID(),menu.get_ID())		.first();		if (mm != null){			mm.setParent_ID(parent.get_ID());			mm.saveEx(get_TrxName());		}	}
}
