/*** Licensed under the KARMA v.1 Law of Sharing. As others have shared freely to you, so shall you share freely back to us.* If you shall try to cheat and find a loophole in this license, then KARMA will exact your share,* and your worldly gain shall come to naught and those who share shall gain eventually above you.* In compliance with previous GPLv2.0 works of Jorg Janke, Low Heng Sin, Carlos Ruiz and contributors.* This Module Creator is an idea put together and coded by Redhuan D. Oon (red1@red1.org)*/package org.ninja.process;
import java.util.List;import org.adempiere.exceptions.AdempiereException;import org.compiere.model.MColumn;import org.compiere.model.MField;import org.compiere.model.MInfoColumn;import org.compiere.model.MInfoWindow;import org.compiere.model.MMenu;import org.compiere.model.MTab;import org.compiere.model.MTable;import org.compiere.model.MTree_Base;import org.compiere.model.MTree_NodeMM;import org.compiere.model.MWindow; import org.compiere.model.Query;import org.compiere.model.X_AD_EntityType;import org.compiere.model.X_AD_TreeNodeMM;import org.compiere.process.ProcessInfoParameter;
import org.compiere.process.SvrProcess;
import org.compiere.util.DB;import org.compiere.util.Env;import org.compiere.util.Trx;import org.compiere.wf.MWFNode;import org.compiere.wf.MWorkflow;import org.ninja.model.MRO_ModelMaker;	public class DeleteModel extends SvrProcess {
	private boolean IsAllNodes = false; 		protected void prepare() { 
		ProcessInfoParameter[] para = getParameter();
			for (ProcessInfoParameter p:para) {
				String name = p.getParameterName();
				if (p.getParameter() == null)					;
				else if(name.equals("IsAllNodes")){
					IsAllNodes = "Y".equals(p.getParameter());
			}
		}
	}
	protected String doIt() {		int tableid = 1;		Trx trx = Trx.get(get_TrxName(), false);		if (IsAllNodes){ //TEST ONLY			String resp =TrxRollback(trx);			if (tableid>0)				return "TESTED OK FOR MODEL RECORD: "+resp;			else				return "TESTED TRX FAILED TO ROLL BACK FOR RECORD: "+resp;		}else //EXECUTE			tableid = executeEach(getRecord_ID());				try {			trx.commit(true);//CATCH EXCEPTIONS FOR RETURN TO USER DISPLAY PANEL (TOP LEFT)		} catch (Exception e) {			return e.getMessage();		}
		return "DELETED RECORD ID "+tableid;
	}	private String TrxRollback(Trx trx) {		Integer tableid = new Integer(0);		tableid = executeEach(getRecord_ID());		if (trx.rollback())			return tableid.toString();		return tableid.toString();	}	/** EntityType = 'U'	 * Deleting AD models trace backward AD_Table > AD_Window-AD_Tab-AD_Field-AD-Column-AD_Table	 * @param rec_id	 */	private int executeEach(int rec_id) { 		int tableIDholder = -1;		MRO_ModelMaker model = new MRO_ModelMaker(Env.getCtx(),rec_id,get_TrxName());				String workflowstr = model.getWorkflowModel();		if (workflowstr!=null){			tableIDholder = deleteWorkflowMenu(model, workflowstr);		}					String tablename = model.getName();		if (tablename==null)			return tableIDholder;				String[] infowindowsplit = tablename.split(",");		if (infowindowsplit.length>1){			int a = deleteInfoWindow(infowindowsplit[0]);			if (a>0){				model.setDescription("** INFO MODEL SET DELETED** ACTIVATE BACK TO REUSE");				model.setIsActive(false);				model.saveEx(get_TrxName());				return a;			}		}			 		int a = DB.getSQLValue(get_TrxName(), "SELECT count(*) FROM "+tablename);		if (a>0){			if (IsAllNodes)				throw new AdempiereException("TEST "+tablename+" HAS "+a+" RECORD(S)");			else				throw new AdempiereException("ERROR "+tablename+" HAS DATA! DELETE THEM FIRST");		}							MTable table = new Query(Env.getCtx(),MTable.Table_Name,MTable.COLUMNNAME_TableName+"=?",get_TrxName())		.setParameters(tablename).firstOnly();				if (table==null)			throw new AdempiereException("BAD SYSTEM - Table Does Not Exist");		if (table.getEntityType().equals(X_AD_EntityType.ENTITYTYPE_Dictionary))			throw new AdempiereException("DICTIONARY ENTITY-TYPE MODEL NOT ALLOWED TO DELETE");		 		String winLeadCaps = MRO_ModelMaker.leadingCapsSpacing(table.getName());		MWindow window = new Query(Env.getCtx(),MWindow.Table_Name,MWindow.COLUMNNAME_Name+"=?",get_TrxName())		.setParameters(winLeadCaps)		.first();				if (window!=null){			deleteWindowMenu(window);		}		//delete all tabs associated with this table - will include master detail tab		deleteTabsFields(table); 						deleteColumns(table);		tableIDholder = table.get_ID();		table.delete(true, get_TrxName());								log.fine("DELETE MODEL - ALL DONE FOR "+tablename);				model.setDescription("** AD MODEL SET DELETED**");		model.setIsActive(false);		model.saveEx(get_TrxName());		return tableIDholder;	}	private int deleteWorkflowMenu(MRO_ModelMaker model, String workflowstr) {		MTree_Base menutree =  new MTree_Base(Env.getCtx(),10,get_TrxName());		int tableIDholder;		String[] WFAndNodes = workflowstr.split("=");		if (WFAndNodes.length<2)			return -1;		MWorkflow workflow = new Query(Env.getCtx(),MWorkflow.Table_Name,MWorkflow.COLUMNNAME_Name+"=?",get_TrxName())		.setParameters(WFAndNodes[0]).first();		MMenu menu = new Query(Env.getCtx(),MMenu.Table_Name,MMenu.COLUMNNAME_AD_Workflow_ID+"=?",get_TrxName())		.setParameters(workflow.get_ID())		.first();				X_AD_TreeNodeMM mm = new Query(Env.getCtx(),MTree_NodeMM.Table_Name,MTree_NodeMM.COLUMNNAME_AD_Tree_ID+"=? AND "+MTree_NodeMM.COLUMNNAME_Node_ID+"=?",get_TrxName())			.setParameters(menutree.getAD_Tree_ID(),menu.get_ID())			.first();		if (mm != null){			mm.delete(false, get_TrxName());		}else			log.fine("DELETE MODEL - No Menu Tree for Workflow Menu");				menu.delete(true, get_TrxName());		tableIDholder = deleteworkflow(workflow);		model.setDescription("** Workflow MODEL DELETED** ACTIVATE BACK TO REUSE");		model.setIsActive(false);		model.saveEx(get_TrxName());		return tableIDholder;	}	private void deleteColumns(MTable table) {		MColumn[] columns = table.getColumns(true);		for (MColumn column:columns){			if (column.getEntityType().equals(X_AD_EntityType.ENTITYTYPE_Dictionary))				throw new AdempiereException("DICTIONARY ENTITY-TYPE COLUMN NOT ALLOWED TO DELETE");			 column.delete(true, get_TrxName());		}	}	private void deleteTabsFields(MTable table) {		List<MTab> tabs = new Query(Env.getCtx(),MTab.Table_Name,MTab.COLUMNNAME_AD_Table_ID+"=?",get_TrxName())		.setParameters(table.get_ID()).list();					for (MTab tab:tabs){			MField[] fields = tab.getFields(true, get_TrxName());			for (MField field:fields){				if (field.getEntityType().equals(X_AD_EntityType.ENTITYTYPE_Dictionary))					throw new AdempiereException("DICTIONARY ENTITY-TYPE FIELD NOT ALLOWED TO DELETE");				field.delete(true, get_TrxName());			}			tab.delete(true, get_TrxName());		}	}	private void deleteWindowMenu(MWindow window) {		MMenu menu = new Query(Env.getCtx(),MMenu.Table_Name,MMenu.COLUMNNAME_AD_Window_ID+"=?",get_TrxName())		.setParameters(window.get_ID())		.first();		MTree_Base menutree =  new MTree_Base(Env.getCtx(),10,get_TrxName());		X_AD_TreeNodeMM mm = new Query(Env.getCtx(),MTree_NodeMM.Table_Name,MTree_NodeMM.COLUMNNAME_AD_Tree_ID+"=? AND "+MTree_NodeMM.COLUMNNAME_Node_ID+"=?",get_TrxName())			.setParameters(menutree.getAD_Tree_ID(),menu.get_ID())			.first();		if (mm != null){			mm.delete(false, get_TrxName());		}else			log.fine("DELETE MODEL - No Menu Tree for Window Menu");				menu.delete(true, get_TrxName());				window.delete(true,get_TrxName());	}	private int deleteworkflow(MWorkflow workflow) { 		int id = workflow.get_ID();		if (workflow.getEntityType().equals(X_AD_EntityType.ENTITYTYPE_Dictionary))			throw new AdempiereException("WORKFLOW IS DICTIONARY EntityType");				workflow.setAD_WF_Node_ID(0);				List<MWFNode> nodes = new Query(Env.getCtx(),MWFNode.Table_Name,MWFNode.COLUMNNAME_AD_Workflow_ID+"=?",get_TrxName())		.setParameters(workflow.get_ID())		.list();		for (MWFNode node:nodes){			node.delete(true, get_TrxName());		}		workflow.delete(true,get_TrxName());		return id;	}	private int deleteInfoWindow(String infoname) { 		MInfoWindow info = new Query(Env.getCtx(),MInfoWindow.Table_Name,MInfoWindow.COLUMNNAME_Name+" Like '"+infoname+"%'",get_TrxName())		.first();		if (info==null)			throw new AdempiereException("NO SUCH INFO WINDOW");		else {			int rec = info.get_ID();			List<MInfoColumn> infocols = new Query(Env.getCtx(),MInfoColumn.Table_Name,MInfoColumn.COLUMNNAME_AD_InfoWindow_ID+"=?",get_TrxName())			.setParameters(info.get_ID())			.list();						for (MInfoColumn infocol:infocols){				infocol.delete(true, get_TrxName());			}						info.delete(true, get_TrxName());			return rec;		} 	}
}
