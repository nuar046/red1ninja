/*** Licensed under the KARMA v.1 Law of Sharing. As others have shared freely to you, so shall you share freely back to us.* If you shall try to cheat and find a loophole in this license, then KARMA will exact your share,* and your worldly gain shall come to naught and those who share shall gain eventually above you.* In compliance with previous GPLv2.0 works of Jorg Janke, Low Heng Sin, Carlos Ruiz and contributors.* This Module Creator is an idea put together and coded by Redhuan D. Oon (red1@red1.org)*/package org.ninja.process;
import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Properties;import org.adempiere.exceptions.AdempiereException;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.usermodel.Row;import org.compiere.model.Query;import org.compiere.model.X_AD_Reference;import org.compiere.model.X_AD_TreeNodeMM;import org.compiere.model.MColumn;import org.compiere.model.MMenu;import org.compiere.model.MRefList;import org.compiere.model.MTab;import org.compiere.model.MTable;import org.compiere.model.MTree_NodeMM;import org.compiere.model.MWindow;import org.compiere.process.ProcessInfoParameter;
import org.compiere.process.SvrProcess;import org.compiere.util.Env;import org.compiere.util.ValueNamePair;
	/**	 * Reverse AD to Ninja Excel (suggestion from Ken Longnan, Shanghai)	 * @author red1 	 * @date 2019 January - 1st day in Year of the Pig	 *	 */
	public class NinjaExporter extends SvrProcess { 	private String File_Directory = ""; 	private int AD_Menu_ID = 0; 	private int AD_Window_ID = 0; 	private int AD_Table_ID = 0; 	private boolean IsActive = false; 	private boolean Processed = false;	private HSSFWorkbook m_workbook = new HSSFWorkbook();	private HSSFSheet refSheet = null;	private int colmark = 0;	private boolean notdone = true;	private Properties m_ctx = null;	private ArrayList<ArrayList<Object>> m_data = null;	private int colcnt = 0;	private int refcellnum=1;	private int refrownum=1;	private MTable Table = null;	private MMenu Menu = null;	private MWindow Window = null; 	private ArrayList<String> refHeaders = new ArrayList<String>();		protected void prepare() {
		ProcessInfoParameter[] para = getParameter();
			for (ProcessInfoParameter p:para) {
				String name = p.getParameterName();
				if (p.getParameter() == null)					;
				else if(name.equals("File_Directory")){
					File_Directory = (String)p.getParameter();
			}
				else if(name.equals("AD_Menu_ID")){
					AD_Menu_ID = p.getParameterAsInt();
			}
				else if(name.equals("AD_Window_ID")){
					AD_Window_ID = p.getParameterAsInt();
			}
				else if(name.equals("AD_Table_ID")){
					AD_Table_ID = p.getParameterAsInt();
			}
				else if(name.equals("IsActive")){
					IsActive = "Y".equals(p.getParameter());
			}
				else if(name.equals("Processed")){
					Processed = "Y".equals(p.getParameter());
			}
		}
	}
	protected String doIt() throws IOException {		colmark = 0;		m_ctx = Env.getCtx();		FileInputStream file = new FileInputStream(File_Directory);  		m_workbook = new HSSFWorkbook(file); 		m_workbook.setForceFormulaRecalculation(true);		HSSFSheet sheet = m_workbook.getSheet("ModelMakerSource");		refSheet = m_workbook.getSheet("DataTypeMaker");		getDataSet(sheet);		writeModelSheet(sheet);
		return "Columns written to Excel : "+colcnt;
	}	private void getDataSet(HSSFSheet sheet) { 		if (AD_Menu_ID+AD_Window_ID+AD_Table_ID<1)			throw new AdempiereException("Don't ever reverse everything. Choose something!");		if (AD_Table_ID>0) {			exportTableToExcel(sheet);			return;		}		if (AD_Menu_ID>0) {			exportMenuSetToExcel(sheet);					}	}	private void exportMenuSetToExcel(HSSFSheet sheet) {		MMenu menu = new MMenu(m_ctx,AD_Menu_ID,get_TrxName());		if (menu==null)			throw new AdempiereException();		//write Menu name to Header Sheet		HSSFSheet headersheet = m_workbook.getSheet("1_RO_ModelHeader");		HSSFCell headcell = headersheet.getRow(1).getCell(0);		headcell.setCellValue(menu.getName().replaceAll("\\s",""));				//get Windows under selected Menu		List<X_AD_TreeNodeMM> mens = new Query(Env.getCtx(),MTree_NodeMM.Table_Name,MTree_NodeMM.COLUMNNAME_Parent_ID+"=?",get_TrxName())				.setParameters(AD_Menu_ID).setOrderBy(MTree_NodeMM.COLUMNNAME_SeqNo)				.list();				for (X_AD_TreeNodeMM men:mens) {			MMenu m = new Query(m_ctx,MMenu.Table_Name,MMenu.COLUMNNAME_AD_Menu_ID+"=?",get_TrxName())					.setParameters(men.getNode_ID()).first();			if (m==null)				continue;			MWindow w = MWindow.get(m_ctx, m.getAD_Window_ID());			if (w==null)				continue;						//Traverse each Table within Window			List<MTab> tabs = new Query(m_ctx,MTab.Table_Name,MTab.COLUMNNAME_AD_Window_ID+"=?",get_TrxName())					.setParameters(w.get_ID()).setOrderBy(MTab.COLUMNNAME_SeqNo).list();						for (MTab tab:tabs) {				if (tab.getAD_Table_ID()>0)					AD_Table_ID = tab.getAD_Table_ID();				exportTableToExcel(sheet);				colmark++;			}					}	}	private void exportTableToExcel(HSSFSheet sheet) {		Table = new MTable(m_ctx,AD_Table_ID,get_TrxName()); 		if (Table==null)			throw new AdempiereException("MTable NULL - shouldn't happen. Are you bitcoin mining or sumtin?");		statusUpdate("Table Name: "+Table.getName());		//clear sheet contents		if (notdone) {			Iterator<Row> rowIterator = sheet.rowIterator(); 			while (rowIterator.hasNext()) {				HSSFRow row = (HSSFRow) rowIterator.next();				Iterator cellIterator = row.cellIterator();	     				while (cellIterator.hasNext()) {		              HSSFCell cell = (HSSFCell) cellIterator.next();		  			if (cell!=null)						cell.setCellValue("");					}			}			notdone=false;		}		HSSFRow row = sheet.getRow(1);		if (row==null) row = sheet.createRow(1);		HSSFCell cell = row.getCell(colmark);		if (cell==null)			cell = row.createCell(colmark);		cell.setCellValue(Table.getTableName().replaceAll("\\s",""));	 				List<MColumn> columns = new Query(m_ctx,MColumn.Table_Name,MColumn.COLUMNNAME_AD_Table_ID+"=?",get_TrxName())				.setParameters(AD_Table_ID)				.setOrderBy(MColumn.COLUMNNAME_SeqNo)				.list(); 		int c = 2; //properties start on third row of Sheet		for (MColumn column:columns) {			String cn = column.getColumnName();			if (cn.equals("IsActive")||cn.equals("Created")||cn.equals("Updated")||cn.equals("CreatedBy")||cn.equals("UpdatedBy")||cn.equals("AD_Org_ID")||cn.equals("AD_Client_ID"))				continue;			if (column.isParent()) {				//Table has Parent				HSSFRow masterrow = sheet.getRow(0);				if (masterrow==null)					masterrow=sheet.createRow(0);				HSSFCell mastercell=masterrow.getCell(colmark);				if (mastercell==null)					mastercell=masterrow.createCell(colmark);				mastercell.setCellValue(column.getColumnName().substring(0,column.getColumnName().length()-3));			} else 				if (column.getAD_Reference().getName().equals("List")){				writeRefList(column);			}			HSSFRow rowin = sheet.getRow(c);			if (rowin==null)				rowin = sheet.createRow(c);			HSSFCell cellin = rowin.getCell(colmark);			if (cellin==null)				cellin = rowin.createCell(colmark);			if (cellin.toString().isEmpty()) {				cellin = rowin.createCell(colmark);				cellin.setCellValue(cn);			} 			c++;colcnt++;		}	}	private void writeRefList(MColumn column) { 		if (refSheet==null)			return;		refrownum = 6;				HSSFRow nameRow = (HSSFRow)refSheet.getRow(3);		HSSFCell nameCell = nameRow.getCell(refcellnum);		if (nameCell==null)			nameCell = nameRow.createCell(refcellnum);				//check if written to excel before		if (refHeaders.contains(column.getColumnName()))			return;				nameCell.setCellValue(column.getColumnName());				//cache list of reference values to avoid repetition TODO		refHeaders.add(column.getColumnName());				X_AD_Reference refValue = new X_AD_Reference(getCtx(),column.getAD_Reference_Value_ID(),get_TrxName());		//go thru reference list items		ValueNamePair[] refvalues = MRefList.getList(getCtx(), refValue.getAD_Reference_ID(), false);		for (ValueNamePair pair:refvalues){			String pairName = pair.getName();			HSSFRow listrowvalue = (HSSFRow)refSheet.getRow(refrownum);			if (listrowvalue==null)				listrowvalue=(HSSFRow)refSheet.createRow(refrownum);			HSSFCell listcellvalue = listrowvalue.getCell(refcellnum); 			if (listcellvalue==null)				listcellvalue=listrowvalue.createCell(refcellnum);			listcellvalue.setCellValue(pairName);			refrownum++;		}				refcellnum++;	}	private void writeModelSheet(HSSFSheet sheet) throws IOException {		 Iterator<Row> rowIterator = sheet.rowIterator();		 while (rowIterator.hasNext()) {				HSSFRow row = (HSSFRow) rowIterator.next();				HSSFCell cell = row.getCell(0);				if (cell!=null)					System.out.println(cell.getRichStringCellValue());					}			FileOutputStream out = new FileOutputStream(File_Directory);			if(out!=null)			{				m_workbook.write(out);				out.close();				m_workbook.close();			}	}
}
