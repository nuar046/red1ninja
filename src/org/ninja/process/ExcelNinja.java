/*** Licensed under the KARMA v.1 Law of Sharing. As others have shared freely to you, so shall you share freely back to us.* If you shall try to cheat and find a loophole in this license, then KARMA will exact your share,* and your worldly gain shall come to naught and those who share shall gain eventually above you.* In compliance with previous GPLv2.0 works of Jorg Janke, Low Heng Sin, Carlos Ruiz and contributors.* This Module Creator is an idea put together and coded by Redhuan D. Oon (red1@red1.org)*/package org.ninja.process;
 import java.io.File;import java.io.FileInputStream;import java.io.IOException; import java.util.Iterator;import org.apache.poi.hssf.usermodel.*;import org.apache.poi.ss.usermodel.CellType;import org.compiere.model.Query;import org.compiere.process.ProcessInfoParameter;
import org.compiere.process.SvrProcess;import org.ninja.model.MRO_CodeMaker;import org.ninja.model.MRO_ModelHeader;import org.ninja.model.MRO_ModelMaker;

	public class ExcelNinja extends SvrProcess {
		 	private	 MRO_ModelHeader header = null;	private	 MRO_ModelMaker model = null;	private	 MRO_CodeMaker code = null;		 	private String File_Directory = "";
	protected void prepare() {
		ProcessInfoParameter[] para = getParameter();
			for (ProcessInfoParameter p:para) {
				String name = p.getParameterName();
				if (p.getParameter() == null)					;
				else if(name.equals("File_Directory")){
					File_Directory = (String)p.getParameter();
			}
		}
	}
	protected String doIt() throws  IOException {				FileInputStream file = new FileInputStream(File_Directory);  		HSSFWorkbook workbook = new HSSFWorkbook(file); 			writeToNinja(workbook.getSheet("1_"+MRO_ModelHeader.Table_Name), "HEADER");			writeToNinja(workbook.getSheet("2_"+MRO_ModelMaker.Table_Name), "MODEL");			writeToNinja(workbook.getSheet("3_"+MRO_CodeMaker.Table_Name), "CODE");  
		return header.getName()+" MODEL SEQNO "+model.getSeqNo();
	}		private void writeToNinja(HSSFSheet sheet, String type) {		 Iterator rowIterator = sheet.rowIterator();		 HSSFDataFormatter dataFormatter = new HSSFDataFormatter();		 if (rowIterator.hasNext())			 rowIterator.next();		 if (type=="HEADER") {             header = new MRO_ModelHeader(getCtx(),0,get_TrxName());         } 		 		 while (rowIterator.hasNext()) {	         String modelName = "";			 if(type=="MODEL") {	             model = new MRO_ModelMaker(getCtx(),0,get_TrxName());    	         } else {	            code = new MRO_CodeMaker(getCtx(),0,get_TrxName());	         }			 			 HSSFRow row = (HSSFRow) rowIterator.next();             // Now let's iterate over the columns of the current row	         Iterator cellIterator = row.cellIterator();	         while (cellIterator.hasNext()) {	              HSSFCell cell = (HSSFCell) cellIterator.next();	              String cellValue = dataFormatter.formatCellValue(cell); 	              int cellInteger = 0;	              if(cell.getCellType() == CellType.FORMULA) {	                  log.fine("Formula is " + cell.getCellFormula());	                  switch(cell.getCachedFormulaResultType()) {	                      case NUMERIC:	                          cellValue= Double.toString(cell.getNumericCellValue());	                          break;	                      case STRING:	                          cellValue= cell.getRichStringCellValue().getString();	                          break;	                  }	              }   	              boolean yes = false;          		if (cellValue.equals("Y"))          			yes = true;	              if (type=="HEADER") {  	            	  switch (cell.getColumnIndex()) {	            	  case 0:	            		  header.setName(cellValue);	            		  header.saveEx(get_TrxName());	            		  break;           	  	            	  }         	  	            	  	              } else if(type=="MODEL") { 	            	  switch (cell.getColumnIndex()+1) {	            	  case 1:	            		model.setRO_ModelHeader_ID(header.get_ID());	            		break;           	  	            	  case 2:	            		model.setSeqNo( Integer.parseInt(cellValue));	            		break;        	  	            	  case 3:	            		model.setWorkflowStructure(yes);	            		break;        	  	            	  case 4:	            		model.setKanbanBoard(yes);  	            		break;        	  	            	  case 5:	            		model.setMaster(cellValue);	            		break;	            	  case 6:	            		model.setName(cellValue);	            		modelName = cellValue;	            		break;	            	  case 7:	            		model.setHelp(cellValue);	            		break;	            	  case 8:	            		model.setColumnSet(cellValue);	            		break;	            	  }	            	  model.saveEx(get_TrxName());	              }	              else { 	            	  switch (cell.getColumnIndex()+1) {	            	  case 1:	            		code.setRO_ModelHeader_ID(header.get_ID());	            		break;           	  	            	  case 2:	            		  code.setSeqNo( Integer.parseInt(cellValue));	            		break;        	  	            	  case 3:	            		  code.setName(cellValue);	            		  modelName = cellValue;	            		break;        	  	            	  case 4:	            		  code.setPluginLocation(cellValue);  	            		break;        	  	            	  case 5:	            		  code.setGenerateModel(yes);	            		break;	            	  case 6:	            		  code.setGenerateModelFactory(yes);	            		break;	            	  case 7:	            		  code.setGenerateProcess(cellValue);	            		break;	            	  case 8:	            		  code.setDescription(cellValue);	            		break;	            	  case 9:	            		  code.setProcessParameters(cellValue);	            		break;	            	  }	            	  code.saveEx(get_TrxName());	              }	         }	         statusUpdate(type+":"+modelName);		 }	}	
}
